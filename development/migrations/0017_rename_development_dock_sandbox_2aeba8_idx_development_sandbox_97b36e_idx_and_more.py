# Generated by Django 4.2.7 on 2025-07-16 20:15

from django.db import migrations

def safe_rename_indexes(apps, schema_editor):
    """Safely rename indexes if they exist, otherwise create new ones"""
    if schema_editor.connection.vendor == 'postgresql':
        with schema_editor.connection.cursor() as cursor:
            # PostgreSQL: Check and rename indexes
            index_renames = [
                ('development_dock_sandbox_2aeba8_idx', 'development_sandbox_97b36e_idx'),
                ('development_dock_contain_4d80c4_idx', 'development_contain_84368b_idx'),
                ('development_dock_host_po_a9160d_idx', 'development_host_po_2071ac_idx'),
                ('development_dock_project_3755a1_idx', 'development_project_41ebb3_idx'),
                ('development_dock_convers_d45f8a_idx', 'development_convers_66f678_idx'),
                ('development_dock_contain_2cb4be_idx', 'development_contain_4ca3a0_idx'),
                ('development_dock_status_0a6455_idx', 'development_status_fe0828_idx'),
                ('development_kube_project_f5e7cd_idx', 'development_project_34896b_idx'),
                ('development_kube_convers_8587f7_idx', 'development_convers_517a43_idx'),
                ('development_kube_pod_nam_214c1f_idx', 'development_pod_nam_3fae00_idx'),
                ('development_kube_namespa_283f9f_idx', 'development_namespa_f5b94f_idx'),
                ('development_kube_status_0e403e_idx', 'development_status_99da96_idx'),
                ('development_kube_pod_id_2a1fa3_idx', 'development_pod_id_efaea1_idx'),
                ('development_kube_contain_5810c6_idx', 'development_contain_1dc930_idx'),
                ('development_kube_service_1fb248_idx', 'development_service_b7742e_idx'),
                ('development_kube_contain_e10f86_idx', 'development_contain_3e335b_idx'),
            ]
            
            for old_name, new_name in index_renames:
                # Check if old index exists
                cursor.execute("""
                    SELECT 1 FROM pg_indexes 
                    WHERE indexname = %s
                """, [old_name])
                if cursor.fetchone():
                    cursor.execute(f'ALTER INDEX {old_name} RENAME TO {new_name}')
    elif schema_editor.connection.vendor == 'sqlite':
        # SQLite doesn't support renaming indexes directly
        # The indexes will be created with new names automatically
        pass

def reverse_rename_indexes(apps, schema_editor):
    """Reverse the index renames"""
    # For reverse, swap old and new names
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('development', '0016_noop_index_rename'),
    ]

    operations = [
        migrations.RunPython(safe_rename_indexes, reverse_rename_indexes),
    ]
