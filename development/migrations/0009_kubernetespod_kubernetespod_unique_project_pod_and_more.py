# Generated by Django 4.2.7 on 2025-05-02 17:26

from django.db import migrations, models

def add_constraints_if_not_exists(apps, schema_editor):
    """
    Add constraints only if they don't already exist in the database.
    Handles both PostgreSQL and SQLite databases.
    """
    if schema_editor.connection.vendor == 'postgresql':
        with schema_editor.connection.cursor() as cursor:
            # Check which constraints already exist
            cursor.execute("""
                SELECT constraint_name 
                FROM information_schema.table_constraints 
                WHERE table_name = 'development_kubernetespod' 
                AND constraint_type = 'UNIQUE'
                AND constraint_name IN ('unique_project_pod', 'unique_conversation_pod', 'unique_project_conversation_pod')
            """)
            existing_constraints = [row[0] for row in cursor.fetchall()]
            
            # Add constraints that don't exist
            if 'unique_project_pod' not in existing_constraints:
                cursor.execute("""
                    ALTER TABLE development_kubernetespod 
                    ADD CONSTRAINT unique_project_pod 
                    UNIQUE (project_id) 
                    WHERE conversation_id IS NULL
                """)
            
            if 'unique_conversation_pod' not in existing_constraints:
                cursor.execute("""
                    ALTER TABLE development_kubernetespod 
                    ADD CONSTRAINT unique_conversation_pod 
                    UNIQUE (conversation_id) 
                    WHERE project_id IS NULL
                """)
            
            if 'unique_project_conversation_pod' not in existing_constraints:
                cursor.execute("""
                    ALTER TABLE development_kubernetespod 
                    ADD CONSTRAINT unique_project_conversation_pod 
                    UNIQUE (project_id, conversation_id) 
                    WHERE project_id IS NOT NULL AND conversation_id IS NOT NULL
                """)
    elif schema_editor.connection.vendor == 'sqlite':
        # SQLite doesn't support conditional unique constraints the same way
        # Check if indexes already exist before creating them
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type = 'index' 
                AND name IN ('unique_project_pod', 'unique_conversation_pod', 'unique_project_conversation_pod')
            """)
            existing_indexes = [row[0] for row in cursor.fetchall()]
            
            if 'unique_project_pod' not in existing_indexes:
                cursor.execute("""
                    CREATE UNIQUE INDEX unique_project_pod 
                    ON development_kubernetespod(project_id) 
                    WHERE conversation_id IS NULL
                """)
            
            if 'unique_conversation_pod' not in existing_indexes:
                cursor.execute("""
                    CREATE UNIQUE INDEX unique_conversation_pod 
                    ON development_kubernetespod(conversation_id) 
                    WHERE project_id IS NULL
                """)
            
            if 'unique_project_conversation_pod' not in existing_indexes:
                cursor.execute("""
                    CREATE UNIQUE INDEX unique_project_conversation_pod 
                    ON development_kubernetespod(project_id, conversation_id) 
                    WHERE project_id IS NOT NULL AND conversation_id IS NOT NULL
                """)

def remove_constraints(apps, schema_editor):
    """Reverse operation to remove the constraints."""
    if schema_editor.connection.vendor == 'postgresql':
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("ALTER TABLE development_kubernetespod DROP CONSTRAINT IF EXISTS unique_project_pod")
            cursor.execute("ALTER TABLE development_kubernetespod DROP CONSTRAINT IF EXISTS unique_conversation_pod")
            cursor.execute("ALTER TABLE development_kubernetespod DROP CONSTRAINT IF EXISTS unique_project_conversation_pod")
    elif schema_editor.connection.vendor == 'sqlite':
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("DROP INDEX IF EXISTS unique_project_pod")
            cursor.execute("DROP INDEX IF EXISTS unique_conversation_pod")
            cursor.execute("DROP INDEX IF EXISTS unique_project_conversation_pod")

class Migration(migrations.Migration):

    dependencies = [
        ('development', '0008_remove_dockersandbox_port'),
    ]

    operations = [
        migrations.CreateModel(
            name='KubernetesPod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.CharField(blank=True, help_text='Project identifier associated with this pod', max_length=255, null=True)),
                ('conversation_id', models.CharField(blank=True, help_text='Conversation identifier associated with this pod', max_length=255, null=True)),
                ('pod_name', models.CharField(help_text='Kubernetes pod name', max_length=255)),
                ('namespace', models.CharField(help_text='Kubernetes namespace', max_length=255)),
                ('image', models.CharField(help_text='Container image used', max_length=255)),
                ('status', models.CharField(choices=[('created', 'Created'), ('running', 'Running'), ('stopped', 'Stopped'), ('error', 'Error')], default='created', help_text='Current status of the pod', max_length=20)),
                ('resource_limits', models.JSONField(blank=True, help_text='Resource limits applied to the pod', null=True)),
                ('service_details', models.JSONField(blank=True, help_text='Details of the associated services (ports, node ports, etc.)', null=True)),
                ('ssh_connection_details', models.JSONField(blank=True, help_text='SSH connection details for the k8s host server', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the pod was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the pod was last updated')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the pod was started', null=True)),
                ('stopped_at', models.DateTimeField(blank=True, help_text='When the pod was stopped', null=True)),
            ],
            options={
                'verbose_name': 'Kubernetes Pod',
                'verbose_name_plural': 'Kubernetes Pods',
                'indexes': [models.Index(fields=['project_id'], name='development_kube_project_f5e7cd_idx'), models.Index(fields=['conversation_id'], name='development_kube_convers_8587f7_idx'), models.Index(fields=['pod_name'], name='development_kube_pod_nam_214c1f_idx'), models.Index(fields=['namespace'], name='development_kube_namespa_283f9f_idx'), models.Index(fields=['status'], name='development_kube_status_0e403e_idx')],
            },
        ),
        migrations.RunPython(add_constraints_if_not_exists, remove_constraints),
    ]
