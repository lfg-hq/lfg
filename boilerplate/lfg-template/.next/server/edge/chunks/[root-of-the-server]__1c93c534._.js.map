{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,qJAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\nimport Credentials from \"next-auth/providers/credentials\"\nimport bcrypt from \"bcryptjs\"\nimport { prisma } from \"@/lib/prisma\"\n\nexport const authConfig = {\n  providers: [\n    Google({\n      clientId: process.env.AUTH_GOOGLE_ID!,\n      clientSecret: process.env.AUTH_GOOGLE_SECRET!,\n    }),\n    Credentials({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) return null\n        \n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email as string }\n        })\n        \n        if (!user || !user.password) return null\n        \n        const passwordMatch = await bcrypt.compare(\n          credentials.password as string,\n          user.password\n        )\n        \n        if (!passwordMatch) return null\n        \n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image,\n        }\n      }\n    })\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/auth/error\",\n    verifyRequest: \"/auth/verify-request\",\n  },\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      const isLoggedIn = !!auth?.user\n      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard')\n      const isOnExample = nextUrl.pathname.startsWith('/example')\n      \n      if (isOnDashboard || isOnExample) {\n        if (isLoggedIn) return true\n        return false\n      }\n      return true\n    },\n    async jwt({ token, user, account }) {\n      if (user) {\n        token.id = user.id\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (session?.user && token?.id) {\n        session.user.id = token.id as string\n      }\n      return session\n    },\n  },\n} satisfies NextAuthConfig"],"names":[],"mappings":";;;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEO,MAAM,aAAa;IACxB,WAAW;QACT,CAAA,GAAA,6JAAA,CAAA,UAAM,AAAD,EAAE;YACL,UAAU,QAAQ,GAAG,CAAC,cAAc;YACpC,cAAc,QAAQ,GAAG,CAAC,kBAAkB;QAC9C;QACA,CAAA,GAAA,kKAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU,OAAO;gBAE1D,MAAM,OAAO,MAAM,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAW;gBAC9C;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE,OAAO;gBAEpC,MAAM,gBAAgB,MAAM,yIAAA,CAAA,UAAM,CAAC,OAAO,CACxC,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,eAAe,OAAO;gBAE3B,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;gBACnB;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;QACP,eAAe;IACjB;IACA,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAClD,MAAM,cAAc,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAEhD,IAAI,iBAAiB,aAAa;gBAChC,IAAI,YAAY,OAAO;gBACvB,OAAO;YACT;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,OAAO,IAAI;gBAC9B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\nimport { authConfig } from \"./auth.config\"\n\nexport default NextAuth(authConfig).auth\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;uCAEe,CAAA,GAAA,6JAAA,CAAA,UAAQ,AAAD,EAAE,6HAAA,CAAA,aAAU,EAAE,IAAI;AAEjC,MAAM,SAAS;IACpB,SAAS;QAAC;KAAkD;AAC9D"}}]
}