{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/jitinpillai/Projects/LFG/boilerplate/lfg-template/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/jitinpillai/Projects/LFG/boilerplate/lfg-template/src/lib/tokens.ts"],"sourcesContent":["import crypto from 'crypto'\nimport { prisma } from './prisma'\n\nexport async function generateVerificationToken(email: string, userId?: string) {\n  const token = crypto.randomBytes(32).toString('hex')\n  const expires = new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\n  \n  await prisma.verificationToken.create({\n    data: {\n      identifier: email,\n      token,\n      expires,\n      userId,\n    },\n  })\n  \n  return token\n}\n\nexport async function verifyToken(token: string) {\n  const verificationToken = await prisma.verificationToken.findUnique({\n    where: { token },\n    include: { user: true },\n  })\n  \n  if (!verificationToken) {\n    return { error: 'Invalid token' }\n  }\n  \n  if (verificationToken.expires < new Date()) {\n    await prisma.verificationToken.delete({\n      where: { token },\n    })\n    return { error: 'Token expired' }\n  }\n  \n  return { success: true, email: verificationToken.identifier, user: verificationToken.user }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,0BAA0B,KAAa,EAAE,MAAe;IAC5E,MAAM,QAAQ,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;IAC9C,MAAM,UAAU,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK,KAAK,MAAM,WAAW;;IAEtE,MAAM,sHAAA,CAAA,SAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACpC,MAAM;YACJ,YAAY;YACZ;YACA;YACA;QACF;IACF;IAEA,OAAO;AACT;AAEO,eAAe,YAAY,KAAa;IAC7C,MAAM,oBAAoB,MAAM,sHAAA,CAAA,SAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC;QAClE,OAAO;YAAE;QAAM;QACf,SAAS;YAAE,MAAM;QAAK;IACxB;IAEA,IAAI,CAAC,mBAAmB;QACtB,OAAO;YAAE,OAAO;QAAgB;IAClC;IAEA,IAAI,kBAAkB,OAAO,GAAG,IAAI,QAAQ;QAC1C,MAAM,sHAAA,CAAA,SAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC;YACpC,OAAO;gBAAE;YAAM;QACjB;QACA,OAAO;YAAE,OAAO;QAAgB;IAClC;IAEA,OAAO;QAAE,SAAS;QAAM,OAAO,kBAAkB,UAAU;QAAE,MAAM,kBAAkB,IAAI;IAAC;AAC5F","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///Users/jitinpillai/Projects/LFG/boilerplate/lfg-template/src/lib/email.ts"],"sourcesContent":["import nodemailer from 'nodemailer'\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST,\n  port: parseInt(process.env.SMTP_PORT || '587'),\n  secure: process.env.SMTP_SECURE === 'true',\n  auth: process.env.SMTP_USER && process.env.SMTP_PASSWORD ? {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASSWORD,\n  } : undefined,\n})\n\nexport async function sendVerificationEmail(email: string, token: string) {\n  const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL}/auth/verify-email?token=${token}`\n  \n  const mailOptions = {\n    from: process.env.SMTP_FROM || 'noreply@example.com',\n    to: email,\n    subject: 'Verify your email address',\n    html: `\n      <h1>Verify your email</h1>\n      <p>Click the link below to verify your email address:</p>\n      <a href=\"${verificationUrl}\">Verify Email</a>\n      <p>Or copy and paste this URL into your browser:</p>\n      <p>${verificationUrl}</p>\n      <p>This link will expire in 24 hours.</p>\n    `,\n  }\n  \n  // Development mode: Log to console instead of sending\n  if (process.env.NODE_ENV === 'development' || !process.env.SMTP_HOST || process.env.SMTP_HOST === 'smtp.gmail.com' && process.env.SMTP_PASSWORD === 'your-app-password') {\n    console.log('\\nðŸ“§ EMAIL DEBUG (Development Mode):')\n    console.log('To:', email)\n    console.log('Subject:', mailOptions.subject)\n    console.log('Verification URL:', verificationUrl)\n    console.log('---\\n')\n    return\n  }\n  \n  await transporter.sendMail(mailOptions)\n}\n\nexport async function sendPasswordResetEmail(email: string, token: string) {\n  const resetUrl = `${process.env.NEXT_PUBLIC_APP_URL}/auth/reset-password?token=${token}`\n  \n  const mailOptions = {\n    from: process.env.SMTP_FROM || 'noreply@example.com',\n    to: email,\n    subject: 'Reset your password',\n    html: `\n      <h1>Reset your password</h1>\n      <p>Click the link below to reset your password:</p>\n      <a href=\"${resetUrl}\">Reset Password</a>\n      <p>Or copy and paste this URL into your browser:</p>\n      <p>${resetUrl}</p>\n      <p>This link will expire in 1 hour.</p>\n    `,\n  }\n  \n  // Development mode: Log to console instead of sending\n  if (process.env.NODE_ENV === 'development' || !process.env.SMTP_HOST || process.env.SMTP_HOST === 'smtp.gmail.com' && process.env.SMTP_PASSWORD === 'your-app-password') {\n    console.log('\\nðŸ“§ EMAIL DEBUG (Development Mode):')\n    console.log('To:', email)\n    console.log('Subject:', mailOptions.subject)\n    console.log('Reset URL:', resetUrl)\n    console.log('---\\n')\n    return\n  }\n  \n  await transporter.sendMail(mailOptions)\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS;IAC3B,MAAM,SAAS,QAAQ,GAAG,CAAC,SAAS,IAAI;IACxC,QAAQ,QAAQ,GAAG,CAAC,WAAW,KAAK;IACpC,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI,QAAQ,GAAG,CAAC,aAAa,GAAG;QACzD,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,MAAM,QAAQ,GAAG,CAAC,aAAa;IACjC,IAAI;AACN;AAEO,eAAe,sBAAsB,KAAa,EAAE,KAAa;IACtE,MAAM,kBAAkB,6DAAmC,yBAAyB,EAAE,OAAO;IAE7F,MAAM,cAAc;QAClB,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI;QAC/B,IAAI;QACJ,SAAS;QACT,MAAM,CAAC;;;eAGI,EAAE,gBAAgB;;SAExB,EAAE,gBAAgB;;IAEvB,CAAC;IACH;IAEA,sDAAsD;IACtD,wCAAyK;QACvK,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,OAAO;QACnB,QAAQ,GAAG,CAAC,YAAY,YAAY,OAAO;QAC3C,QAAQ,GAAG,CAAC,qBAAqB;QACjC,QAAQ,GAAG,CAAC;QACZ;IACF;;AAGF;AAEO,eAAe,uBAAuB,KAAa,EAAE,KAAa;IACvE,MAAM,WAAW,6DAAmC,2BAA2B,EAAE,OAAO;IAExF,MAAM,cAAc;QAClB,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI;QAC/B,IAAI;QACJ,SAAS;QACT,MAAM,CAAC;;;eAGI,EAAE,SAAS;;SAEjB,EAAE,SAAS;;IAEhB,CAAC;IACH;IAEA,sDAAsD;IACtD,wCAAyK;QACvK,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,OAAO;QACnB,QAAQ,GAAG,CAAC,YAAY,YAAY,OAAO;QAC3C,QAAQ,GAAG,CAAC,cAAc;QAC1B,QAAQ,GAAG,CAAC;QACZ;IACF;;AAGF","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///Users/jitinpillai/Projects/LFG/boilerplate/lfg-template/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport bcrypt from 'bcryptjs'\nimport { prisma } from '@/lib/prisma'\nimport { generateVerificationToken } from '@/lib/tokens'\nimport { sendVerificationEmail } from '@/lib/email'\n\nexport async function POST(req: Request) {\n  try {\n    const { name, email, password } = await req.json()\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    })\n\n    if (existingUser) {\n      return NextResponse.json(\n        { error: 'User already exists' },\n        { status: 400 }\n      )\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10)\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n      },\n    })\n\n    // Generate verification token\n    const token = await generateVerificationToken(email, user.id)\n\n    // Send verification email\n    await sendVerificationEmail(email, token)\n\n    return NextResponse.json({\n      message: 'User created successfully. Please check your email to verify your account.',\n      userId: user.id,\n    })\n  } catch (error) {\n    console.error('Registration error:', error)\n    return NextResponse.json(\n      { error: 'Failed to create user' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhD,+BAA+B;QAC/B,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,UAAU;YACZ;QACF;QAEA,8BAA8B;QAC9B,MAAM,QAAQ,MAAM,CAAA,GAAA,sHAAA,CAAA,4BAAyB,AAAD,EAAE,OAAO,KAAK,EAAE;QAE5D,0BAA0B;QAC1B,MAAM,CAAA,GAAA,qHAAA,CAAA,wBAAqB,AAAD,EAAE,OAAO;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,QAAQ,KAAK,EAAE;QACjB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}