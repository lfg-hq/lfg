# Generated by Django 4.2.7 on 2025-09-04 01:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0026_project_member_invitation'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IndexedRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('github_url', models.URLField(help_text='GitHub repository URL')),
                ('github_owner', models.CharField(help_text='Repository owner/organization', max_length=255)),
                ('github_repo_name', models.CharField(help_text='Repository name', max_length=255)),
                ('github_branch', models.CharField(default='main', help_text='Branch to index', max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('indexing', 'Indexing'), ('completed', 'Completed'), ('error', 'Error'), ('paused', 'Paused')], default='pending', max_length=20)),
                ('last_indexed_at', models.DateTimeField(blank=True, null=True)),
                ('last_commit_hash', models.CharField(blank=True, help_text='Last indexed commit hash', max_length=40, null=True)),
                ('total_files', models.IntegerField(default=0, help_text='Total number of files in repository')),
                ('indexed_files_count', models.IntegerField(default=0, help_text='Number of files successfully indexed')),
                ('total_chunks', models.IntegerField(default=0, help_text='Total number of code chunks created')),
                ('file_extensions', models.JSONField(default=list, help_text='File extensions to index')),
                ('max_file_size_kb', models.IntegerField(default=500, help_text='Maximum file size to index (KB)')),
                ('exclude_patterns', models.JSONField(default=list, help_text='Patterns to exclude from indexing')),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='indexed_repository', to='projects.project')),
            ],
            options={
                'verbose_name': 'Indexed Repository',
                'verbose_name_plural': 'Indexed Repositories',
            },
        ),
        migrations.CreateModel(
            name='RepositoryMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_language', models.CharField(blank=True, max_length=50, null=True)),
                ('languages_detected', models.JSONField(default=list, help_text='List of programming languages found')),
                ('framework_patterns', models.JSONField(default=list, help_text='Detected frameworks and patterns')),
                ('total_lines_of_code', models.IntegerField(default=0)),
                ('functions_count', models.IntegerField(default=0)),
                ('classes_count', models.IntegerField(default=0)),
                ('external_dependencies', models.JSONField(default=list, help_text='External packages/libraries used')),
                ('internal_dependencies', models.JSONField(default=dict, help_text='Internal module dependency graph')),
                ('documentation_coverage', models.FloatField(default=0.0, help_text='Percentage of functions/classes with docstrings')),
                ('average_function_complexity', models.FloatField(default=0.0, help_text='Average cyclomatic complexity')),
                ('design_patterns', models.JSONField(default=list, help_text='Detected design patterns')),
                ('coding_conventions', models.JSONField(default=dict, help_text='Detected coding conventions and style')),
                ('analyzed_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('repository', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='codebase_index.indexedrepository')),
            ],
            options={
                'verbose_name': 'Repository Metadata',
                'verbose_name_plural': 'Repository Metadata',
            },
        ),
        migrations.CreateModel(
            name='IndexedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(help_text='Relative path from repository root', max_length=1000)),
                ('file_name', models.CharField(help_text='File name with extension', max_length=255)),
                ('file_extension', models.CharField(help_text='File extension', max_length=10)),
                ('file_size_bytes', models.IntegerField(help_text='File size in bytes')),
                ('last_commit_hash', models.CharField(help_text='Last commit that modified this file', max_length=40)),
                ('last_modified_at', models.DateTimeField(help_text='Last modification timestamp from git')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('indexed', 'Indexed'), ('error', 'Error'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('content_hash', models.CharField(help_text='SHA256 hash of file content for change detection', max_length=64)),
                ('language', models.CharField(blank=True, help_text='Detected programming language', max_length=50, null=True)),
                ('total_lines', models.IntegerField(default=0)),
                ('code_chunks_count', models.IntegerField(default=0, help_text='Number of code chunks created from this file')),
                ('error_message', models.TextField(blank=True, null=True)),
                ('indexed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='codebase_index.indexedrepository')),
            ],
            options={
                'verbose_name': 'Indexed File',
                'verbose_name_plural': 'Indexed Files',
            },
        ),
        migrations.CreateModel(
            name='CodeChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for ChromaDB', unique=True)),
                ('chunk_type', models.CharField(choices=[('file', 'Full File'), ('function', 'Function'), ('class', 'Class'), ('method', 'Method'), ('import', 'Import Block'), ('docstring', 'Docstring'), ('comment', 'Comment Block')], max_length=20)),
                ('content', models.TextField(help_text='The actual code content')),
                ('content_preview', models.CharField(help_text='Preview of content for display', max_length=200)),
                ('start_line', models.IntegerField(help_text='Starting line number in file')),
                ('end_line', models.IntegerField(help_text='Ending line number in file')),
                ('function_name', models.CharField(blank=True, help_text='Function/class/method name', max_length=255, null=True)),
                ('complexity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('dependencies', models.JSONField(default=list, help_text='List of dependencies/imports referenced')),
                ('parameters', models.JSONField(default=list, help_text='Function parameters or class attributes')),
                ('embedding_id', models.CharField(help_text='ChromaDB document ID', max_length=100)),
                ('embedding_stored', models.BooleanField(default=False, help_text='Whether embedding is stored in ChromaDB')),
                ('tags', models.JSONField(default=list, help_text='Tags for categorization and search')),
                ('description', models.TextField(blank=True, help_text='Generated description of code functionality', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='codebase_index.indexedfile')),
            ],
            options={
                'verbose_name': 'Code Chunk',
                'verbose_name_plural': 'Code Chunks',
            },
        ),
        migrations.CreateModel(
            name='CodebaseQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_text', models.TextField(help_text='Original user query')),
                ('expanded_queries', models.JSONField(default=list, help_text='Expanded queries for better retrieval')),
                ('retrieved_chunks', models.JSONField(default=list, help_text='List of chunk IDs retrieved')),
                ('relevance_scores', models.JSONField(default=list, help_text='Relevance scores for retrieved chunks')),
                ('context_used', models.TextField(help_text='Final context assembled from chunks')),
                ('retrieval_time_ms', models.IntegerField(help_text='Time taken for retrieval in milliseconds')),
                ('total_chunks_considered', models.IntegerField(default=0)),
                ('enhanced_prd_generated', models.BooleanField(default=False)),
                ('feature_suggestions', models.JSONField(default=list, help_text='AI-suggested features based on codebase')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codebase_queries', to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codebase_queries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Codebase Query',
                'verbose_name_plural': 'Codebase Queries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IndexingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(choices=[('full_index', 'Full Repository Index'), ('incremental_update', 'Incremental Update'), ('file_reindex', 'Single File Reindex'), ('cleanup', 'Cleanup Job')], max_length=20)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='queued', max_length=20)),
                ('total_files', models.IntegerField(default=0)),
                ('processed_files', models.IntegerField(default=0)),
                ('successful_files', models.IntegerField(default=0)),
                ('failed_files', models.IntegerField(default=0)),
                ('django_q_task_id', models.CharField(blank=True, help_text='Django-Q task ID', max_length=100, null=True)),
                ('result_summary', models.JSONField(default=dict, help_text='Summary of job results')),
                ('error_logs', models.TextField(blank=True, null=True)),
                ('queued_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indexing_jobs', to='codebase_index.indexedrepository')),
                ('started_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Indexing Job',
                'verbose_name_plural': 'Indexing Jobs',
                'ordering': ['-queued_at'],
                'indexes': [models.Index(fields=['repository', 'status'], name='codebase_in_reposit_dfbf75_idx'), models.Index(fields=['status', '-queued_at'], name='codebase_in_status_2e5f00_idx'), models.Index(fields=['django_q_task_id'], name='codebase_in_django__0b0918_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='indexedrepository',
            index=models.Index(fields=['status', '-updated_at'], name='codebase_in_status_55aff7_idx'),
        ),
        migrations.AddIndex(
            model_name='indexedrepository',
            index=models.Index(fields=['project', 'status'], name='codebase_in_project_74eef5_idx'),
        ),
        migrations.AddIndex(
            model_name='indexedfile',
            index=models.Index(fields=['repository', 'status'], name='codebase_in_reposit_143c4c_idx'),
        ),
        migrations.AddIndex(
            model_name='indexedfile',
            index=models.Index(fields=['repository', 'file_extension'], name='codebase_in_reposit_c116e7_idx'),
        ),
        migrations.AddIndex(
            model_name='indexedfile',
            index=models.Index(fields=['content_hash'], name='codebase_in_content_8fcc38_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='indexedfile',
            unique_together={('repository', 'file_path')},
        ),
        migrations.AddIndex(
            model_name='codechunk',
            index=models.Index(fields=['file', 'chunk_type'], name='codebase_in_file_id_58e8a6_idx'),
        ),
        migrations.AddIndex(
            model_name='codechunk',
            index=models.Index(fields=['chunk_type', 'complexity'], name='codebase_in_chunk_t_fc09ed_idx'),
        ),
        migrations.AddIndex(
            model_name='codechunk',
            index=models.Index(fields=['function_name'], name='codebase_in_functio_3d7f8a_idx'),
        ),
        migrations.AddIndex(
            model_name='codechunk',
            index=models.Index(fields=['embedding_stored'], name='codebase_in_embeddi_585f48_idx'),
        ),
        migrations.AddIndex(
            model_name='codebasequery',
            index=models.Index(fields=['project', '-created_at'], name='codebase_in_project_1cf954_idx'),
        ),
        migrations.AddIndex(
            model_name='codebasequery',
            index=models.Index(fields=['user', '-created_at'], name='codebase_in_user_id_31eada_idx'),
        ),
    ]
